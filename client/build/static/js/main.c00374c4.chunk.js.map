{"version":3,"sources":["Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","author","citation","quote","setQuote","useEffect","a","axios","get","then","json","status","data","Error","catch","err","console","error","style","container","width","minHeight","display","alignItems","justifyContent","blockquote","textAlign","padding","fontSize","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0PAuDeA,MApDf,WAAgB,IAAD,EAEcC,mBAAS,CAACC,OAAQ,GAAIC,SAAU,KAF9C,mBAEJC,EAFI,KAEEC,EAFF,KAIXC,qBAAU,WAEN,sBAAC,sBAAAC,EAAA,sEAAiBC,IAAMC,IAAI,qBAC3BC,MAAK,SAACC,GAEH,GAAGA,EAAKC,OAAQ,OAAOD,EAAKE,KAE5B,MAAM,IAAIC,MAAM,wCAGnBJ,MAAK,SAACG,GACHR,EAAS,CAACH,OAAQW,EAAKX,OAAQC,SAAUU,EAAKV,cAEjDY,OAAM,SAACC,GAAD,OAAOC,QAAQC,SAXrB,kFAAD,KAaF,IAEF,IAAMC,EAAQ,CACVC,UAAW,CACPC,MAAO,QACPC,UAAW,QACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAEpBC,WAAY,CACRC,UAAW,SACXJ,QAAS,QACTK,QAAS,QAEbzB,SAAU,CACN0B,SAAU,QAEd3B,OAAQ,IAKZ,OACI,yBAAKiB,MAAOA,EAAMC,WACd,gCAAYD,MAAOA,EAAMO,YACrB,uBAAGP,MAAOA,EAAMhB,UAAWC,EAAMD,UACjC,uBAAGgB,MAAOA,EAAMjB,QAASE,EAAMF,WClChC4B,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,UCGVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM8B,c","file":"static/js/main.c00374c4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction Home(){\n\n    const [quote,setQuote] = useState({author: '', citation: ''});\n\n    useEffect(()=>{\n        \n        (async ()=> await axios.get('/api/random-quote')\n        .then((json)=>{\n            \n            if(json.status) return json.data;\n            \n            throw new Error('API is not answering the request.');\n            \n        })\n        .then((data)=>{\n            setQuote({author: data.author, citation: data.citation});\n        })\n        .catch((err)=>console.error))();\n\n    },[]);\n\n    const style = {\n        container: {\n            width: '100vw',\n            minHeight: '100vh',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        blockquote: {\n            textAlign: 'center',\n            display: 'block',\n            padding: '20px'\n        },\n        citation: {\n            fontSize: '40px',\n        },\n        author: {\n            \n        }\n    };\n\n    return (\n        <div style={style.container}>\n            <blockquote style={style.blockquote}>\n                <p style={style.citation}>{quote.citation}</p>\n                <p style={style.author}>{quote.author}</p>\n            </blockquote>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Pages/Home';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\"><Home /></Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}